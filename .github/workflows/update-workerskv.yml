name: Update-CloudflareWorkersKV

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - "json/*.json"

jobs:
  update-kv:
    runs-on: ubuntu-latest
    name: update

    steps:
      - uses: actions/checkout@v3
        with:
          ref: main

      - name: Install Wrangler
        id: install-wrangler
        shell: bash
        run: |
          npm install -g wrangler

      - name: Update Cloudflare KV with recent apps
        id: update-apps
        shell: pwsh
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{secrets.CLOUDFLARE_ACCOUNT_ID}}
          CLOUDFLARE_ZONE_ID: ${{secrets.CLOUDFLARE_ZONE_ID}}
          CLOUDFLARE_API_TOKEN: ${{secrets.CLOUDFLARE_API_TOKEN}}
        run: |
          foreach ($UpdateFile in @("${{ github.workspace }}/json/_update-pwsh.txt", "${{ github.workspace }}/json/_update-powershell.txt")) {
              $Files = Get-Content -Path $UpdateFile -ErrorAction "SilentlyContinue"
              if ($Null -ne $Files) {
                  Write-Host "Found $($Files.Count) files with changes."
                  foreach ($file in $Files) {
                      Write-Host "`nChecking: $file"
                      if ($file -match "json$") {
                          Write-Host "Update with: ${{ github.workspace }}/$file."
                          $file = Get-Item -Path "${{ github.workspace }}/$file"
                          if ($Null -ne $file) {
                              wrangler kv:key put $file.BaseName.ToLower() --path=$($file.FullName) --namespace-id="${{secrets.KV_PROD_NAMESPACE_ID}}"
                          }
                      }
                  }
              }
          }

      - name: Remove update files
        id: remove-update
        shell: pwsh
        run: |
          foreach ($file in @("${{ github.workspace }}/json/_update-pwsh.txt", "${{ github.workspace }}/json/_update-powershell.txt")) {
            Remove-Item -Path $file -Force -ErrorAction "SilentlyContinue"
          }

      - name: Install and cache PowerShell modules
        id: psmodulecache
        uses: potatoqualitee/psmodulecache@v4.5
        with:
          modules-to-cache: Evergreen
          force: true
          shell: pwsh

      - name: Update Evergreen
        id: update-evergreen
        shell: pwsh
        run: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Install-PackageProvider -Name "NuGet" -MinimumVersion 2.8.5.208 -Force -ErrorAction "SilentlyContinue"
          Set-PSRepository -Name "PSGallery" -InstallationPolicy "Trusted" -ErrorAction "SilentlyContinue"
          Update-Module -Name Evergreen -Force -Confirm:$False -ErrorAction "SilentlyContinue"
          Get-Module -Name Evergreen -ListAvailable | Select-Object -Property "Name", "Version", "Path"

      - name: Update Cloudflare KV with all apps list
        id: update-allapps
        shell: pwsh
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{secrets.CLOUDFLARE_ACCOUNT_ID}}
          CLOUDFLARE_ZONE_ID: ${{secrets.CLOUDFLARE_ZONE_ID}}
          CLOUDFLARE_API_TOKEN: ${{secrets.CLOUDFLARE_API_TOKEN}}
        run: |
          try {
            Import-Module -Name "Evergreen" -Force
            Find-EvergreenApp | ConvertTo-Json | Out-File -FilePath "./AllApps.json" -Encoding "Utf8" -NoNewline
            wrangler kv:key put "_allapps" --path="./AllApps.json" --namespace-id="${{secrets.KV_PROD_NAMESPACE_ID}}"
          }
          catch { $_.Exception.Message }
          finally { Remove-Item -Path "./AllApps.json" -Force -ErrorAction "SilentlyContinue" }

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPGKEY }}
          passphrase: ${{ secrets.GPGPASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_config_global: true
          git_tag_gpgsign: true
          git_push_gpgsign: false
          git_committer_name: ${{ secrets.COMMIT_NAME }}
          git_committer_email: ${{ secrets.COMMIT_EMAIL }}

      - name: Get date
        id: get-date
        shell: pwsh
        run: |
          echo "::set-output name=date::$(Get-Date -Format "yyyy.MM.dd")"

      - name: Commit changes
        id: commit
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Update KV ${{ steps.get-date.outputs.date }}.${{ github.run_number }}"
          commit_user_name: ${{ secrets.COMMIT_NAME }}
          commit_user_email: ${{ secrets.COMMIT_EMAIL }}

      - name: "Run if changes have been detected"
        if: steps.commit.outputs.changes_detected == 'true'
        run: echo "Changes committed."

      - name: "Run if no changes have been detected"
        if: steps.commit.outputs.changes_detected == 'false'
        run: echo "No changes detected."
