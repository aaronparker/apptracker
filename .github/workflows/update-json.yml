name: update-json

# Environment variables
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Controls when the action will run. 
on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'scripts/Update-Json.ps1'
      #- '.github/workflows/update-json.yml'
  schedule:
    - cron: '0 */4 * * *'

jobs:
  update-pwsh:
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Install and cache PowerShell modules
        id: psmodulecache
        uses: potatoqualitee/psmodulecache@v4.5
        with:
          modules-to-cache: Evergreen, DnsClient-PS
          force: true
          shell: pwsh

      - name: List Evergreen
        id: list-module
        shell: pwsh
        run: |
          Update-Module -Name "Evergreen" -Force
          Get-Module -Name "Evergreen" -ListAvailable

      # Import GPG key
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPGKEY }}
          passphrase: ${{ secrets.GPGPASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_config_global: true
          git_tag_gpgsign: true
          git_push_gpgsign: false
          git_committer_name: ${{ secrets.COMMIT_NAME }}
          git_committer_email: ${{ secrets.COMMIT_EMAIL }}

      # Run Pester tests
      - name: Update Json
        shell: pwsh
        working-directory: ${{ github.workspace }}
        run: |
          . "${{ github.workspace }}/scripts/Update-Json.ps1" -Path "${{ github.workspace }}/json"

      - name: List updated files
        shell: pwsh
        working-directory: ${{ github.workspace }}
        run: |
          $files = foreach ($item in (git status --short --porcelain)) { ([RegEx]::Match($item, "^..\s(.*)$")).Groups[1].Value }
          $files | Out-File -FilePath "${{ github.workspace }}/json/update-pwsh.txt" -Encoding "Utf8" -NoNewline -Force

      # Format the date number for the commit message
      - name: Get date
        id: get-date
        run: |
            DATEF=`date +%Y.%m.%d`
            echo "::set-output name=date::$DATEF"

      - name: Commit changes
        id: commit
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Update json ${{ steps.get-date.outputs.date }}.${{ github.run_number }} ${{ github.job }}"
          commit_user_name: ${{ secrets.COMMIT_NAME }}
          commit_user_email: ${{ secrets.COMMIT_EMAIL }}

      - name: "Run if changes have been detected"
        if: steps.commit.outputs.changes_detected == 'true'
        run: echo "Changes committed."

      - name: "Run if no changes have been detected"
        if: steps.commit.outputs.changes_detected == 'false'
        run: echo "No changes detected."

  update-powershell:
      needs: update-pwsh
      #if: needs.update-pwsh.outputs.output1 == 'true'
      runs-on: windows-latest

      # Steps represent a sequence of tasks that will be executed as part of the job
      steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - uses: actions/checkout@v3
          with:
            ref: main
            token: ${{ secrets.PAT }}

        # Run Pester tests
        - name: Git pull
          shell: powershell
          run: |
            git config --global core.safecrlf false
            git pull origin main

        - name: Install and cache PowerShell modules
          id: psmodulecache
          uses: potatoqualitee/psmodulecache@v4.5
          with:
            modules-to-cache: Evergreen
            force: true
            shell: powershell

        - name: List Evergreen
          id: list-module
          shell: powershell
          run: |
            Update-Module -Name "Evergreen" -Force
            Get-Module -Name "Evergreen" -ListAvailable

        # Import GPG key
        - name: Import GPG key
          id: import_gpg
          uses: crazy-max/ghaction-import-gpg@v4
          with:
            gpg_private_key: ${{ secrets.GPGKEY }}
            passphrase: ${{ secrets.GPGPASSPHRASE }}
            git_user_signingkey: true
            git_commit_gpgsign: true
            git_config_global: true
            git_tag_gpgsign: true
            git_push_gpgsign: false
            git_committer_name: ${{ secrets.COMMIT_NAME }}
            git_committer_email: ${{ secrets.COMMIT_EMAIL }}

        # Run Pester tests
        - name: Update Json
          shell: powershell
          working-directory: ${{ github.workspace }}
          run: |
            . "${{ github.workspace }}\scripts\Update-Json.ps1" -Path "${{ github.workspace }}\json"

        - name: List updated files
          shell: powershell
          working-directory: ${{ github.workspace }}
          run: |
            $files = foreach ($item in (git status --short --porcelain)) { ([RegEx]::Match($item, "^..\s(.*)$")).Groups[1].Value }
            $files | Out-File -FilePath "${{ github.workspace }}/json/update-powershell.txt" -Encoding "Utf8" -NoNewline -Force

        # Format the date number for the commit message
        - name: Get date
          id: get-date
          run: |
            echo "::set-output name=date::$(Get-Date -Format "yyyy.MM.dd")"

        - name: Commit changes
          id: commit
          uses: stefanzweifel/git-auto-commit-action@v4
          with:
            commit_message: "Update json ${{ steps.get-date.outputs.date }}.${{ github.run_number }} ${{ github.job }}"
            commit_user_name: ${{ secrets.COMMIT_NAME }}
            commit_user_email: ${{ secrets.COMMIT_EMAIL }}

        - name: "Run if changes have been detected"
          if: steps.commit.outputs.changes_detected == 'true'
          run: echo "Changes committed."

        - name: "Run if no changes have been detected"
          if: steps.commit.outputs.changes_detected == 'false'
          run: echo "No changes detected."

  update-docs:
      needs: [ update-pwsh, update-powershell ]
      #if: needs.update-powershell.outputs.output1 == 'true'
      runs-on: ubuntu-latest

      # Steps represent a sequence of tasks that will be executed as part of the job
      steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - uses: actions/checkout@v3
          with:
            ref: main
            token: ${{ secrets.PAT }}

        - name: Git pull
          shell: pwsh
          run: |
            git config --global core.safecrlf false
            git pull origin main

        # Import GPG key
        - name: Import GPG key
          id: import_gpg
          uses: crazy-max/ghaction-import-gpg@v4
          with:
            gpg_private_key: ${{ secrets.GPGKEY }}
            passphrase: ${{ secrets.GPGPASSPHRASE }}
            git_user_signingkey: true
            git_commit_gpgsign: true
            git_config_global: true
            git_tag_gpgsign: true
            git_push_gpgsign: false
            git_committer_name: ${{ secrets.COMMIT_NAME }}
            git_committer_email: ${{ secrets.COMMIT_EMAIL }}

        - name: Install and cache PowerShell modules
          id: psmodulecache
          uses: potatoqualitee/psmodulecache@v4.5
          with:
            modules-to-cache: Evergreen
            shell: pwsh

        - name: List Evergreen
          id: list-module
          shell: pwsh
          run: |
            Update-Module -Name "Evergreen" -Force
            Get-Module -Name "Evergreen" -ListAvailable

        - name: Generate report
          shell: pwsh
          run: |
            $params = @{
              Path      = "${{ github.workspace }}/json/*.json"
              UpdateFile = "${{ github.workspace }}/docs/index.md"
              AppsFile  = "${{ github.workspace }}/docs/apps.md"
              AboutFile = "${{ github.workspace }}/docs/about.md"
            }
            . "${{ github.workspace }}/scripts/New-Report.ps1" @params

        # Format the date number for the commit message
        - name: Get date
          id: get-date
          run: |
            DATEF=`date +%Y.%m.%d`
            echo "::set-output name=date::$DATEF"

        - name: Commit changes
          id: commit
          uses: stefanzweifel/git-auto-commit-action@v4
          with:
            commit_message: "Update docs ${{ steps.get-date.outputs.date }}.${{ github.run_number }} ${{ github.job }}"
            commit_user_name: ${{ secrets.COMMIT_NAME }}
            commit_user_email: ${{ secrets.COMMIT_EMAIL }}

        - name: "Run if changes have been detected"
          if: steps.commit.outputs.changes_detected == 'true'
          run: echo "Changes committed."

        - name: "Run if no changes have been detected"
          if: steps.commit.outputs.changes_detected == 'false'
          run: echo "No changes detected."
